import OpenAI from 'openai';
import emojiRegex from 'emoji-regex';

const SYSTEM_PROMPT = `Tu es un mod√©rateur bienveillant qui aide √† reformuler les messages des parents tout en pr√©servant leur sens et leur √©motion.

R√®gles STRICTES √† suivre :

1. Si le message n'a pas de sens (suite de lettres al√©atoires, texte incoh√©rent) :
   - Retourner un objet JSON avec une propri√©t√© "error"

2. Pour les mots violents/inappropri√©s :
   - Remplacer par des √©mojis appropri√©s (üò°, üò¢, ü§Ø, etc.)
   - Ne jamais supprimer le message
   - Le rendre publiable sans violence directe

3. Correction orthographique :
   - Corriger uniquement les fautes qui g√™nent la compr√©hension
   - Garder le style simple/familier de l'auteur
   - Ne pas r√©√©crire compl√®tement

4. INTERDIT :
   - Pas de commentaires ni d'analyses
   - Pas de conseils ni de suggestions
   - Pas de formules comme "je vous conseille" ou "il semble que"

5. D√©tecter la cat√©gorie du message parmi :
   - fatigue
   - education
   - sante
   - developpement
   - alimentation
   - sommeil
   - autres

6. Format de r√©ponse JSON OBLIGATOIRE :
   - Si le message est incompr√©hensible : 
     {
       "error": "Votre message semble difficile √† comprendre. Pouvez-vous le reformuler ?"
     }
   - Si le message est valide : 
     {
       "text": "Message reformul√©",
       "category": "cat√©gorie_d√©tect√©e"
     }`;

export interface ModerationResult {
  error?: string;
  text?: string;
  category?: string;
}

export const moderateMessage = async (message: string, isResponse: boolean = false): Promise<ModerationResult> => {
  try {
    // Check if message is too short or just emojis
    const regex = emojiRegex();
    const messageWithoutEmojis = message.replace(regex, '').trim();
    if (messageWithoutEmojis.length < 2) {
      return {
        error: "Votre message semble difficile √† comprendre. Pouvez-vous le reformuler ?"
      };
    }

    const openai = new OpenAI({
      apiKey: import.meta.env.VITE_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true
    });

    const systemPrompt = isResponse ? 
      `${SYSTEM_PROMPT}\n\nNote: Ce message est une r√©ponse √† un autre message. Assure-toi qu'il reste dans le contexte d'une r√©ponse bienveillante.` :
      SYSTEM_PROMPT;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: `Mod√®re ce message et retourne un objet JSON selon le format sp√©cifi√© : ${message}`
        }
      ],
      temperature: 0.7,
      max_tokens: 500,
      response_format: { type: "json_object" }
    });

    const response = JSON.parse(completion.choices[0].message.content || '{}');
    
    if (response.error) {
      return { error: response.error };
    }

    return { 
      text: response.text,
      category: response.category
    };
  } catch (error) {
    console.error('Error moderating message:', error);
    return {
      error: "Une erreur est survenue lors de la mod√©ration du message. Veuillez r√©essayer."
    };
  }
};